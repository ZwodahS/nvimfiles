{
  "CommentLine": {
    "prefix": [ "commentline", "****"],
    "body": [
    ],
    "description": "Comment line"
  },
  "CommentBlock": {
    "prefix": ["commentblock", "**"],
    "body": [
      "/**",
      "\t${0}",
      "**/"
    ],
    "description": "Comment block"
  },
  "Nolint": {
    "prefix": ["nolint"],
    "body": [
      "// @formatter:off"
    ],
    "description": "Add no lint formatter comment"
  },
  "Function": {
    "prefix": ["fn"],
    "body": [
      "${4}function ${1:fN} ($2): ${3} {",
      "}"
    ]
  },
  "Public Function": {
    "prefix": ["pfn"],
    "body": [
      "public function ${1:fN}($2): ${3} {",
      "}"
    ]
  },
  "Override Public Function": {
    "prefix": ["opfn"],
    "body": [
      "override public function ${1:fN}($2): ${3} {",
      "\tsuper.$1();",
      "\t$0",
      "}"
    ]
  },
  "Breakpoint": {
    "prefix": ["db"],
    "body": [
      "Debug.breakpoint();"
    ]
  },
  "PrintVar": {
    "prefix": ["printVar", "pv"],
    "body": [
      "Logger.debug('${1:var}: \\${$1}');"
    ]
  },
  "TypeName": {
    "prefix": ["TypeName", "TN"],
    "body": [
      "public static final TypeName = \"${2:$TM_FILENAME_BASE}\";"
    ]
  },
  "FinalStaticString": {
    "prefix": ["finalstring", "const"],
    "body": [
      "public static final ${1:String}: String = \"$1\";"
    ]
  },
  "StringEnum": {
    "prefix": ["strenum"],
    "body": [
      "public var ${1} = \"${1}\";"
    ]
  },
  "CommentHeader": {
    "prefix": ["----"],
    "body": [
      "// ---- ${1} ---- //"
    ]
  },
  "Ternary Assignment": {
    "prefix": [":="],
    "body": [
      "${1} = $1 != ${3:null} ? $1 : ${2:defaultValue}"
    ]
  },
  "Ternary AssignmentWithRightSide": {
    "prefix": ["null:="],
    "body": [
      "$1 != ${2:null} ? $1 : "
    ]
  },
  "publicvar": {
    "prefix": ["var"],
    "body": [
      "${3:public} var ${1:name}: ${2:type};"
    ]
  },
  "vargetnever": {
    "prefix": ["vargetnever", "vgn", "vargn"],
    "body": [
      "${4:public} var ${1:name}(get, never): ${2:type};",
      "",
      "${5:inline} public function get_$1(): $2 {",
      "\treturn ${3:returnValue};",
      "}"
    ]
  },
  "vargetset": {
    "prefix": ["vargetset", "vgs", "vargs"],
    "body": [
      "${4:public} var ${1:name}(get, set): ${2:type};",
      "",
      "${5:inline} function get_$1(): $2 {",
      "\treturn ${3:returnValue};",
      "}",
      "",
      "public function set_$1(v: $2): $2 {",
      "}"
    ]
  },
  "vardefaultget": {
    "prefix": ["vardefaultset", "vds", "vards"],
    "body": [
      "${3:public} var ${1:name}(default, set): ${2:type};",
      "",
      "public function set_$1(v: $2): $2 {",
      "\tthis.$1 = v;",
      "\treturn this.$1;",
      "}"
    ]
  },
  "vardefaultnull": {
    "prefix": ["vardefaultnull", "vdn", "vardn"],
    "body": [
      "${3:public} var ${1:name}(default, null): ${2:type};"
    ]
  },
  "constructorset": {
    "prefix": ["set"],
    "body": [
      "${2:this}.${1:} = $1;"
    ]
  },
  "ifnotnull": {
    "prefix": ["ifnotnullset"],
    "body": [
      "if (${1:target} != null) ${2:prop} = $1;"
    ]
  },
  "guard": {
    "prefix": ["guard"],
    "body": [
      "if (${1:object} == ${2:null}) return$0;"
    ]
  },
  "ifbracket": {
    "prefix": ["if"],
    "body": [
      "if (${1}) {",
      "\t$0",
      "}"
    ]
  },

  "objectIdAbstract": {
    "prefix": ["either"],
    "body": [
      "package world.ds;",
      "",
      "import haxe.ds.Either;",
      "",
      "abstract ${1:$TM_FILENAME_BASE}(Either<${2:L}, ${3:R}>) from Either<$2, $3> to Either<$2, $3> {",
      "\t@:from inline static function from_${4:left}($4: $2): $1 {",
      "\t\treturn Left($4);",
      "\t}",
      "",
      "\t@:from inline static function from_${5:right}($5: $3): $1 {",
      "\t\treturn Right($5);",
      "\t}",
      "",
      "\t@:to inline function to_$4(): Null<$2> {",
      "\t\treturn switch (this) {",
      "\t\t\tcase Left($4): $4;",
      "\t\t\tdefault: null;",
      "\t\t}",
      "\t}",
      "",
      "\t@:to inline function to_$5(): Null<$3> {",
      "\t\treturn switch (this) {",
      "\t\t\tcase Right($5): $5;",
      "\t\t\tdefault: null;",
      "\t\t}",
      "\t}",
      "",
      "\tpublic var ${4}(get, never): $2;",
      "",
      "\tpublic function get_${4}(): $2 {",
      "\t\treturn switch(this) {",
      "\t\t\tcase Left($4): $4;",
      "\t\t\tdefault: null;",
      "\t\t};",
      "\t}",
      "",
      "\tpublic var ${5}(get, never): $3;",
      "",
      "\tpublic function get_${5}(): $3 {",
      "\t\treturn switch(this) {",
      "\t\t\tcase Right($5): $5;",
      "\t\t\tdefault: null;",
      "\t\t}",
      "\t}",
      "}"
    ]
  },

  "for": {
    "prefix": ["for"],
    "body": [
      "for (${1:x} in ${2:y}) {",
      "}"
    ]
  },

  "forint": {
    "prefix": ["fori", "forint"],
    "body": [
      "for (${1:x} in ${3:0}...${2:y}) {",
      "}"
    ]
  },

  "switch.fieldType": {
    "prefix": ["switch.FieldType"],
    "description": "switch statement for haxe.macro.FieldType",
    "body": [
      "switch (${1:f.kind}) {",
      "\tcase FVar(_.toType() => ${2:type}, ${3:expr}): ",
      "\t\t// $2: haxe.macro.Type, $3: haxe.macro.Expr",
      "\tcase FFun(${4:func}):",
      "\t\t// $4: haxe.macro.Function",
      "\tcase FProp(g, s, _.toType() => $2, $3):",
      "\t\t// g: String, s: String, $2:haxe.macro.Type, $3:haxe.macro.Expr",
      "}"
    ]
  },

  "switch.Type": {
    "prefix": ["switch.Type"],
    "description": "switch statement for haxe.macro.Type",
    "body": [
      "switch (type) {",
      "\tcase TInst(_.get() => ${1:type}, ${2:params}):",
      "\t\t// $1: haxe.macro.Type",
      "\t\t// $2: Array<haxe.macro.Type>",
      "\tcase TType(_.get() => $1, $2):",
      "\t\t// $1: haxe.macro.Type",
      "\t\t// $2: Array<haxe.macro.Type>",
      "\t// case TDynamic(_.get() => $1):",
      "\t\t// $1: haxe.macro.Type",
      "\t// case TFun(args, ret):",
      "\t\t// args: Array<{t: haxe.macro.Type, opt: Bool, name: String}",
      "\t\t// ret: haxe.macro.Type",
      "\t// case TEnum(_.get() => $1, _):",
      "\t\t// $1: haxe.macro.EnumType",
      "\tdefault:",
      "\t\t// don't handle TLazy, TAbstract, TMono, TDynamic",
      "}"
    ]
  }
}
